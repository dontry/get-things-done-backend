swagger: "2.0"
info:
  version: "0.0.1"
  title: Get Things Done App
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths
basePath: /
# define components
schemes:
  # tip: remove http to make production-grade
  - http
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /v1/hello:
    # binds a127 app logic to a route
    x-swagger-router-controller: hello_world
    get:
      description: Returns 'Hello' to the caller
      # used as the method name of the controller
      operationId: getHello
      parameters:
        - name: name
          in: query
          description: The name of the person to whom to say hello
          required: false
          type: string
      responses:
        200:
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/HelloWorldResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /v1/auth/login:
    x-swagger-router-controller: AuthController
    post:
      description: User login
      operationId: login
      produces:
        - "application/json"
      parameters:
        - name: credential
          in: body
          description: User's username
          required: true
          schema:
            $ref: "#/definitions/Credential"
      responses:
        200:
          description: "Login sucess"
  /v1/auth/register:
    x-swagger-router-controller: AuthController
    post:
      description: User login
      operationId: register
      produces:
        - "application/json"
      parameters:
        - name: registration info
          in: body
          description: User's registration info
          required: true
          schema:
            $ref: "#/definitions/RegistrationInfo"
      responses:
        200:
          description: "Register success"

  /v1/users:
    x-swagger-router-controller: users
    get:
      description: Returns all users
      operationId: getUsers
      security:
        - Bearer: []
      parameters: []
      responses:
        200:
          description: Success
        401:
          description: No authorization token
    post:
      description: Create a user
      operationId: addUser
      produces:
        - application/json
      parameters:
        - name: user
          in: body
          description: The user to be added
          required: true
          schema:
            $ref: "#/definitions/AddUserResponse"
      responses:
        200:
          description: "Get user success"
          schema:
            $ref: "#/definitions/User"

  /v1/users/{id}:
    x-swagger-router-controller: UserController
    get:
      description: Return a user by id
      operationId: getUser
      security:
        - Bearer: []
      produces:
        - "application/json"
      parameters:
        - name: id
          in: path
          description: The id of ther user
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
    put:
      description: Update a user by id
      operationId: updateUser
      security:
        - Bearer: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: "Id of the user being updated"
          required: true
          type: string
        - name: updated_user
          in: body
          description: "The updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: User updated
          schema:
            $ref: "#/definitions/UpdateUserResponse"
        400:
          description: "Yikes! An error!"
    delete:
      description: Delete a user by id
      operationId: delete
      security:
        - Bearer: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          type: string
          required: true
      responses:
        200:
          description: "User deleted"
          schema:
            $ref: "#/definitions/DeleteUserResponse"
  /v1/tasks:
    x-swagger-router-controller: task
    get:
      description: return all tasks
      operationId: findAll
      security:
        - Bearer: []
      produces:
        - application/json
      # parameters:
      #   - name: user_id
      #     in: query
      #     description: "User id of the tasks"
      #     required: true
      #     type: string
      responses:
        200:
          description: Get tasks by user id
    post:
      description: create a new task
      operationId: create
      security:
        - Bearer: []
      produces:
        - application/json
      parameters:
        - name: task
          in: body
          description: "New task"
          required: true
          schema:
            $ref: "#/definitions/Task"
      responses:
        200:
          description: Create a new task successfully
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  HelloWorldResponse:
    required:
      - message
    properties:
      message:
        type: string
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  User:
    type: object
    properties:
      id:
        type: string
        description: User id
      username:
        type: string
        description: Username
      name:
        $ref: "#/definitions/FullName"
      age:
        type: number
        description: User's age
  Credential:
    type: object
    properties:
      username:
        type: string
        description: User's username
      password:
        type: string
        description: User's password(should be hashed)
  RegistrationInfo:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      email:
        type: string
      age:
        type: number
      name:
        $ref: "#/definitions/FullName"
      sex:
        type: string
  FullName:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
  AddUserResponse:
    type: object
    description: It returns a created user object
    properties:
      data:
        $ref: "#/definitions/User"
      message:
        type: string
  UpdateUserResponse:
    type: object
    required:
      - message
      - data
    description: It returns a updated user object
    properties:
      data:
        $ref: "#/definitions/User"
      message:
        type: string
  DeleteUserResponse:
    required:
      - message
      - id
    description: It returns a delete user id
    properties:
      message:
        type: string
      id:
        type: number
  #Task
  Task:
    type: object
    description: Task object
    required:
      - title
      - userId
    properties:
      title:
        type: string
      attribute:
        type: string
      priority:
        type: integer
      createdAt:
        type: integer
      startAt:
        type: integer
      endAt:
        type: integer
      estimatedTime:
        type: integer
      spentTime:
        type: integer
      allDay:
        type: boolean
      source:
        type: string
      deleted:
        type: integer
      archived:
        type: integer
      completed:
        type: interger
      hidden:
        type: integer
      tags:
        type: array
        items:
          type: string
      projectId:
        type: string
      userId:
        type: string
